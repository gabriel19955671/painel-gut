# IMPORTA√á√ïES
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from io import BytesIO
from fpdf import FPDF
import os


st.set_page_config(page_title="Diagn√≥stico 360¬∫ - Potencialize Resultados", layout="wide")

# SIDEBAR
st.sidebar.title("Configura√ß√µes")
data_diagnostico = st.sidebar.date_input("Data de Apresenta√ß√£o do Diagn√≥stico")
st.session_state['data_diagnostico'] = data_diagnostico
nome_cliente = st.sidebar.text_input("Nome do Cliente")
st.session_state['nome_cliente'] = nome_cliente
uploaded_logo = st.sidebar.file_uploader("Anexar Logomarca do Cliente", type=["png", "jpg", "jpeg"])

if uploaded_logo:
    with open("cliente_logo_temp.png", "wb") as f:
        f.write(uploaded_logo.read())

# CARREGAMENTO DE DADOS
@st.cache_data
def carregar_unificado():
    arquivo = pd.ExcelFile('dados_unificado.xlsx', engine='openpyxl')
    df_radar = pd.read_excel(arquivo, sheet_name='Radar')
    df_gut = pd.read_excel(arquivo, sheet_name='Matriz GUT')
    df_plano = pd.read_excel(arquivo, sheet_name='Plano de A√ß√£o')
    if 'Score' not in df_gut.columns:
        df_gut['Score'] = df_gut['Gravidade'] * df_gut['Urg√™ncia'] * df_gut['Tend√™ncia']
    return df_gut, df_radar, df_plano

df_gut, df_radar, df_plano = carregar_unificado()

# CRIA√á√ÉO DAS ABAS
aba1, aba2, aba3, aba4, aba5, aba6 = st.tabs([
    "üìä Gr√°fico Radar", 
    "üóÇÔ∏è Matriz GUT", 
    "üìù Plano de A√ß√£o", 
    "üì• Exportar PDF", 
    "üßæ Instru√ß√µes",
    "‚ú® Gr√°ficos Especiais"])

# ABA 1 - Gr√°fico Radar
with aba1:
    st.subheader("Gr√°fico Radar por Departamento, √Årea e Avalia√ß√£o")
    col1, col2, col3 = st.columns([3, 3, 4])
    with col1:
        departamentos = sorted(df_radar['Departamento'].unique())
        depto_selecionado = st.multiselect("Departamento(s)", departamentos, default=departamentos)
    with col2:
        areas = sorted(df_radar['√Årea'].unique())
        area_selecionada = st.multiselect("√Årea(s)", areas, default=areas)
    with col3:
        avaliacao_min, avaliacao_max = st.slider("Intervalo de Avalia√ß√£o", 0.0, 10.0, (0.0, 10.0), step=0.1)

    df_plot = df_radar[
        (df_radar['Departamento'].isin(depto_selecionado)) &
        (df_radar['√Årea'].isin(area_selecionada)) &
        (df_radar['Avalia√ß√£o'] >= avaliacao_min) &
        (df_radar['Avalia√ß√£o'] <= avaliacao_max)
    ]

    fig_radar = go.Figure()
    if not df_plot.empty:
        df_agrupado = df_plot.groupby('√Årea')['Avalia√ß√£o'].mean().reset_index()
        df_full = pd.DataFrame({'√Årea': df_radar['√Årea'].unique()})
        df_full = df_full.merge(df_agrupado, on='√Årea', how='left').fillna(0)
        fig_radar.add_trace(go.Scatterpolar(
            r=df_full['Avalia√ß√£o'],
            theta=df_full['√Årea'],
            mode='lines+markers+text',
            fill='toself',
            marker=dict(size=8, color='green'),
            line=dict(color='green', width=3),
            text=df_agrupado['Avalia√ß√£o'].round(1).astype(str),
            textposition="top center",
            textfont=dict(size=16, color='black')
        ))

    fig_radar.update_layout(
        polar=dict(
            bgcolor="lavender",
            radialaxis=dict(visible=True, range=[0,10]),
            angularaxis=dict(tickfont=dict(size=14))
        ),
        title=dict(text="Radar de Avalia√ß√£o", font=dict(size=20)),
        margin=dict(l=20, r=20, t=40, b=20),
        height=600
    )
    st.plotly_chart(fig_radar, use_container_width=True)
    st.subheader("Tabela de Pontua√ß√µes Filtradas")
    st.dataframe(df_plot[['Departamento', '√Årea', 'Avalia√ß√£o']], use_container_width=True)

# ABA 2 - Matriz GUT
with aba2:
    st.subheader("Matriz GUT - Prioriza√ß√£o das Dores")
    st.dataframe(df_gut, use_container_width=True)

    fig_gut = go.Figure(data=[go.Scatter(
        x=df_gut['Urg√™ncia'],
        y=df_gut['Gravidade'],
        mode='markers+text',
        text=df_gut['Problema'],
        textposition="top center",
        marker=dict(size=df_gut['Tend√™ncia']*5, color=df_gut['Score'], colorscale='Reds', showscale=True)
    )])

    fig_gut.update_layout(
        title="Visualiza√ß√£o Matriz GUT",
        xaxis_title="Urg√™ncia",
        yaxis_title="Gravidade",
        margin=dict(l=40, r=40, t=60, b=40),
        height=500
    )
    st.plotly_chart(fig_gut, use_container_width=True)

# ABA 3 - Plano de A√ß√£o
with aba3:
    st.subheader("Plano de A√ß√£o - Estrat√©gias de Melhoria")
    st.dataframe(df_plano, use_container_width=True)

    if 'Prazo' in df_plano.columns:
        prazo_counts = df_plano['Prazo'].value_counts().reset_index()
        prazo_counts.columns = ['Prazo', 'Quantidade']

        st.markdown("### ü•ß Distribui√ß√£o das A√ß√µes por Prazo")
        fig_pizza = go.Figure(data=[go.Pie(labels=prazo_counts['Prazo'], values=prazo_counts['Quantidade'], hole=0.4)])
        st.plotly_chart(fig_pizza, use_container_width=True)

        st.markdown("### üìä Quantidade de A√ß√µes por Prazo para Conclus√£o")
        fig_barras = go.Figure()
        fig_barras.add_trace(go.Bar(
            x=df_plano['Prazo'],
            y=[1]*len(df_plano),
            text=df_plano['A√ß√£o'],
            textposition='outside'
        ))
        st.plotly_chart(fig_barras, use_container_width=True)

# ABA 4 - Exportar PDF (placeholder para futuras melhorias)
with aba4:
    st.subheader("Exportar Diagn√≥stico 360¬∫ em PDF")
    st.markdown("Bot√µes de exporta√ß√£o e personaliza√ß√£o ser√£o adicionados aqui.")

# ABA 5 - Instru√ß√µes
with aba5:
    st.subheader("üßæ Instru√ß√µes P√≥s-Diagn√≥stico")
    instrucoes = st.text_area("Digite aqui as instru√ß√µes finais para o cliente:", height=300)
    imagem_instrucao = st.file_uploader("Opcional: Anexar imagem para as instru√ß√µes", type=["png", "jpg", "jpeg"])
    if imagem_instrucao:
        with open("instrucao_img_temp.png", "wb") as f:
            f.write(imagem_instrucao.read())
        st.image("instrucao_img_temp.png", width=400)
    st.session_state['instrucoes_digitadas'] = instrucoes

# ABA 6 - Gr√°ficos Especiais
with aba6:
    st.subheader("‚ú® Gr√°ficos Especiais")
    st.markdown("#### üîù Top 10 Problemas por Score GUT")
    top10 = df_gut.sort_values(by='Score', ascending=False).head(10)
    fig_top10 = go.Figure(go.Bar(
        x=top10['Score'],
        y=top10['Problema'],
        orientation='h',
        marker_color='crimson'
    ))
    fig_top10.update_layout(height=500, margin=dict(l=120, r=20, t=40, b=40))
    st.plotly_chart(fig_top10, use_container_width=True)

    st.markdown("#### üìà Evolu√ß√£o M√©dia das Avalia√ß√µes por √Årea")
    media_por_area = df_radar.groupby(['√Årea', 'Departamento'])['Avalia√ß√£o'].mean().reset_index()
    fig_linha = go.Figure()
    for dep in media_por_area['Departamento'].unique():
        df_dep = media_por_area[media_por_area['Departamento'] == dep]
        fig_linha.add_trace(go.Scatter(x=df_dep['√Årea'], y=df_dep['Avalia√ß√£o'], mode='lines+markers', name=dep))
    fig_linha.update_layout(height=500, xaxis_title='√Årea', yaxis_title='Avalia√ß√£o M√©dia')
    st.plotly_chart(fig_linha, use_container_width=True)
