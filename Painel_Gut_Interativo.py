# IMPORTA√á√ïES
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from io import BytesIO
from fpdf import FPDF
import os

st.set_page_config(page_title="Diagn√≥stico 360¬∫ - Potencialize Resultados", layout="wide")

# SIDEBAR
st.sidebar.title("Configura√ß√µes")
data_diagnostico = st.sidebar.date_input("Data de Apresenta√ß√£o do Diagn√≥stico")
st.session_state['data_diagnostico'] = data_diagnostico
nome_cliente = st.sidebar.text_input("Nome do Cliente")
st.session_state['nome_cliente'] = nome_cliente
uploaded_logo = st.sidebar.file_uploader("Anexar Logomarca do Cliente", type=["png", "jpg", "jpeg"])

if uploaded_logo:
    with open("cliente_logo_temp.png", "wb") as f:
        f.write(uploaded_logo.read())

if st.sidebar.button("Remover Logomarca do Cliente"):
    if os.path.exists("cliente_logo_temp.png"):
        os.remove("cliente_logo_temp.png")
        st.sidebar.success("Logomarca removida com sucesso.")

# CABE√áALHO
col_logo, col_titulo, col_logo_cliente = st.columns([1, 5, 1])
with col_logo:
    if os.path.exists("logo PR (3) (2).png"):
        st.image('logo PR (3) (2).png', width=250)
with col_titulo:
    st.markdown("<h1 style='text-align: center;'>Diagn√≥stico 360¬∫ - Potencialize Resultados</h1>", unsafe_allow_html=True)
    if nome_cliente:
        st.markdown(f"<h3 style='text-align: center; color: #555555;'>{nome_cliente}</h3>", unsafe_allow_html=True)
with col_logo_cliente:
    if os.path.exists("cliente_logo_temp.png"):
        st.image('cliente_logo_temp.png', width=150)

# CARREGAMENTO DE DADOS
@st.cache_data
def carregar_unificado():
    arquivo = pd.ExcelFile('dados_unificado.xlsx', engine='openpyxl')
    df_radar = pd.read_excel(arquivo, sheet_name='Radar')
    df_gut = pd.read_excel(arquivo, sheet_name='Matriz GUT')
    df_plano = pd.read_excel(arquivo, sheet_name='Plano de A√ß√£o')
    if 'Score' not in df_gut.columns:
        df_gut['Score'] = df_gut['Gravidade'] * df_gut['Urg√™ncia'] * df_gut['Tend√™ncia']
    return df_gut, df_radar, df_plano

df_gut, df_radar, df_plano = carregar_unificado()

instrucoes_finais = st.session_state.get("instrucoes_digitadas", "")

aba1, aba2, aba3, aba4, aba5, aba6 = st.tabs([
    "üìä Gr√°fico Radar",
    "üóÇÔ∏è Matriz GUT",
    "üìù Plano de A√ß√£o",
    "üì• Exportar PDF",
    "üßæ Instru√ß√µes Finais",
    "‚ú® Gr√°ficos Especiais"
])

# ... (as demais abas seguem como est√£o, sem altera√ß√µes)

# ABA 4 - Exportar PDF
with aba4:
    st.subheader("Exportar Diagn√≥stico 360¬∫ em PDF")
    opcoes_exportacao = st.selectbox("Escolha o conte√∫do para exportar:", [
        "PDF Completo",
        "Gr√°fico Radar",
        "Matriz GUT",
        "Plano de A√ß√£o",
        "Instru√ß√µes Finais",
        "Gr√°ficos Especiais"
    ])
    if st.button("Gerar PDF"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", 'B', 16)
        pdf.cell(0, 10, f"{opcoes_exportacao} - Diagn√≥stico 360¬∫", ln=True, align="C")
        pdf.set_font("Arial", '', 12)
        pdf.multi_cell(0, 10, f"Dados exportados: {opcoes_exportacao} - Cliente: {nome_cliente}")
        pdf.output("diagnostico_360_exportado.pdf")
        with open("diagnostico_360_exportado.pdf", "rb") as f:
            st.download_button("üì• Baixar PDF", f, file_name="diagnostico_360_exportado.pdf", mime="application/pdf")
